name: Query Security Details of Repositories

on:
  workflow_dispatch:

jobs:
  query-security-details:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js and dependencies
        run: |
          # Install Node.js
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          sudo apt-get install -y nodejs

          # Install xlsx-populate to write Excel files
          npm install xlsx-populate

      - name: Query Security Details for Repositories
        run: |
          # List of repositories to query
          REPOSITORIES=("owner/repo1" "owner/repo2" "owner/repo3")
         
          # Output XLSX file path
          XLSX_FILE="security_details.xlsx"
         
          # Create a Node.js script to generate the XLSX file
          cat << 'EOF' > generate_excel.js
          const XlsxPopulate = require("xlsx-populate");

          // Initialize the spreadsheet
          XlsxPopulate.fromBlankAsync().then(workbook => {
            const sheet = workbook.sheet(0);
            const header = ["Repository", "Type", "ID", "Description", "Severity", "State"];
            sheet.row(1).cell(1).value(header);

            let rowIndex = 2;

            // Function to add data to the sheet
            function addData(repo, type, id, description, severity, state) {
              sheet.row(rowIndex).cell(1).value(repo);
              sheet.row(rowIndex).cell(2).value(type);
              sheet.row(rowIndex).cell(3).value(id);
              sheet.row(rowIndex).cell(4).value(description);
              sheet.row(rowIndex).cell(5).value(severity);
              sheet.row(rowIndex).cell(6).value(state);
              rowIndex++;
            }

            // Run the API calls and process data for each repository
            const fetchSecurityDetails = async () => {
              for (const repo of ["owner/repo1", "owner/repo2", "owner/repo3"]) {
                // Fetch data (you can replace this with actual API requests)
                const securityAdvisories = [] // Simulate fetched security advisories
                const vulnerabilityAlerts = [] // Simulate fetched vulnerability alerts
                const codeScanningAlerts = [] // Simulate fetched code scanning alerts

                // Add data to the sheet (example)
                addData(repo, "Advisory", "123", "Sample advisory description", "High", "open");
                addData(repo, "Vulnerability Alert", "456", "Sample vulnerability alert", "Medium", "closed");
                addData(repo, "Code Scanning Alert", "789", "Code scanning issue detected", "Critical", "open");
              }

              // Write to file
              return workbook.toFileAsync("security_details.xlsx");
            };

            fetchSecurityDetails().then(() => {
              console.log("Excel file generated successfully.");
            }).catch(err => {
              console.error("Error generating Excel file:", err);
            });
          });
          EOF

          # Run the Node.js script
          node generate_excel.js
